{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","ScreenComponent","NativeStackView","state","navigation","descriptors","colors","styles","container","routes","map","route","options","render","renderScene","key","gestureEnabled","stackPresentation","stackAnimation","contentStyle","StyleSheet","absoluteFill","emit","type","target","dispatch","StackActions","pop","source","backgroundColor","background","create","flex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA;;AAKA;;;;;;;;;;;;;;;;AAMA,MAAMA,MAAM,GAAIC,0BAAhB;;AAQe,SAASC,eAAT,OAIL;AAAA,MAJ8B;AACtCC,IAAAA,KADsC;AAEtCC,IAAAA,UAFsC;AAGtCC,IAAAA;AAHsC,GAI9B;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAa,uBAAnB;AAEA,SACE,oBAAC,+BAAD;AAAa,IAAA,KAAK,EAAEC,MAAM,CAACC;AAA3B,KACGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAI;AACzB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAM,EAAEC;AAAnB,QAAmCT,WAAW,CAACM,KAAK,CAACI,GAAP,CAApD;AACA,UAAM;AACJC,MAAAA,cADI;AAEJC,MAAAA,iBAAiB,GAAG,MAFhB;AAGJC,MAAAA,cAHI;AAIJC,MAAAA;AAJI,QAKFP,OALJ;AAOA,WACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAED,KAAK,CAACI,GADb;AAEE,MAAA,KAAK,EAAEK,wBAAWC,YAFpB;AAGE,MAAA,cAAc,EAAEL,cAHlB;AAIE,MAAA,iBAAiB,EAAEC,iBAJrB;AAKE,MAAA,cAAc,EAAEC,cALlB;AAME,MAAA,QAAQ,EAAE,MAAM;AACdd,QAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,QADQ;AAEdC,UAAAA,MAAM,EAAEb,KAAK,CAACI;AAFA,SAAhB;AAID,OAXH;AAYE,MAAA,WAAW,EAAE,MAAM;AACjBX,QAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,MAAM,EAAEb,KAAK,CAACI;AAFA,SAAhB;AAKAX,QAAAA,UAAU,CAACqB,QAAX,mBACKC,qBAAaC,GAAb,EADL;AAEEC,UAAAA,MAAM,EAAEjB,KAAK,CAACI,GAFhB;AAGES,UAAAA,MAAM,EAAErB,KAAK,CAACY;AAHhB;AAKD;AAvBH,OAyBE,oBAAC,qBAAD,eAAkBH,OAAlB;AAA2B,MAAA,KAAK,EAAED;AAAlC,OAzBF,EA0BE,oBAAC,iBAAD;AACE,MAAA,KAAK,EAAE,CACLJ,MAAM,CAACC,SADF,EAEL;AAAEqB,QAAAA,eAAe,EAAEvB,MAAM,CAACwB;AAA1B,OAFK,EAGLX,YAHK;AADT,OAOGL,WAAW,EAPd,CA1BF,CADF;AAsCD,GA/CA,CADH,CADF;AAoDD;;AAED,MAAMP,MAAM,GAAGa,wBAAWW,MAAX,CAAkB;AAC/BvB,EAAAA,SAAS,EAAE;AACTwB,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport {\n  StackNavigationState,\n  StackActions,\n  useTheme,\n} from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map(route => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                { backgroundColor: colors.background },\n                contentStyle,\n              ]}\n            >\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}